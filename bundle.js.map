{"version":3,"sources":["webpack:///webpack/bootstrap 219e95d029bc67a8fb15","webpack:///./main.js","webpack:///./~/suncalc/suncalc.js"],"names":["SunCalc","require","milisecondsPerDay","months","yearDaylight","lat","long","milisecondsDaylight","dates","datesOf2016","forEach","date","push","daylight","totalLight","total","month","seconds","minutes","hours","monthlyDaylight","percentageDaylight","count","monthLength","includes","arrSlice","slice","totalDaylight","reduce","a","b","perc","times","getTimes","sunset","sunrise","diff","isNaN","fixDiff","fixedDiff","monthsWith30Days","day","newDate","Date","test","console","log"],"mappings":"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AACA;AACA;AACA;;AAEA,oCAAmC,SAAS;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,yBAAwB;;AAExB;AACA;AACA;;AAEA;AACA;AACA,sCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 219e95d029bc67a8fb15\n **/","const SunCalc = require('suncalc');\nconst milisecondsPerDay = 86400000;\nconst months = [\"January\",\n                \"February\",\n                \"March\",\n                \"April\",\n                \"May\",\n                \"June\",\n                \"July\",\n                \"August\",\n                \"September\",\n                \"October\",\n                \"November\",\n                \"December\"\n              ];\n\nconst yearDaylight = (lat, long) => {\n  const milisecondsDaylight = [];\n  const dates = datesOf2016();\n  dates.forEach((date)=>{\n    milisecondsDaylight.push(daylight(date, lat, long));\n  });\n  return milisecondsDaylight;\n};\n\nconst totalLight = (lat, long) => {\n  const milisecondsDaylight = yearDaylight(lat, long);\n  let total = 0;\n  milisecondsDaylight.forEach((month) => {\n    total += month;\n  });\n  const seconds = total/1000;\n  const minutes = seconds/60;\n  const hours = minutes/60;\n  return hours;\n};\n\nconst monthlyDaylight = (lat, long) => {\n  const milisecondsDaylight = yearDaylight(lat, long);\n  let percentageDaylight = {};\n  let count = 0;\n  months.forEach((month)=>{\n\n    let monthLength;\n    if (month === \"February\"){\n      monthLength = 29;\n    } else if ([\"April\", \"June\", \"September\", \"November\"].includes(month)){\n      monthLength = 30;\n    } else {\n      monthLength = 31;\n    }\n\n    let total = monthLength * milisecondsPerDay;\n    let arrSlice = milisecondsDaylight.slice(count, count + monthLength);\n    let totalDaylight = arrSlice.reduce((a, b) => a + b, 0);\n    let perc = (totalDaylight/total)*100;\n    percentageDaylight[month] = perc;\n    count += monthLength;\n  });\n\n  return percentageDaylight;\n};\n\n\n\n\nconst daylight = (date, lat, long) => {\n  const times = SunCalc.getTimes(date, lat, long);\n  const sunset = times.sunset;\n  const sunrise = times.sunrise;\n  let diff = sunset - sunrise;\n  if (isNaN(diff)){\n    diff = fixDiff(diff, lat);\n  }\n  return diff;\n};\n\n//fixes diff when sun doesn't rise or set\nconst fixDiff = (diff, lat) => {\n  let fixedDiff;\n  if (lat > 0){\n    fixedDiff = milisecondsPerDay;\n  } else {\n    fixedDiff = 0;\n  }\n  return fixedDiff;\n};\n\nconst datesOf2016 = () => {\n  let dates = [];\n  const monthsWith30Days = [4, 6, 9, 10];\n  for (let month = 0; month < 12; month++){\n    for (let day = 1; day <= 31; day++){\n\n      if (day === 30 && month === 2){\n        break;\n      } else if (day === 31 && monthsWith30Days.includes(month)){\n        break;\n      } else {\n        let newDate = new Date(2016, month, day);\n        dates.push(newDate);\n      }\n    }\n  }\n  return dates;\n};\n\n\nlet test = totalLight(-70, -0.1);\nconsole.log(test);\n\n\n\n/** WEBPACK FOOTER **\n ** ./main.js\n **/","/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n\n(function () { 'use strict';\n\n// shortcuts for easier to read formulas\n\nvar PI   = Math.PI,\n    sin  = Math.sin,\n    cos  = Math.cos,\n    tan  = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad  = PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date)   { return toJulian(date) - J2000; }\n\n\n// general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\n\nfunction azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\n\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\n\n\n// general sun calculations\n\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\n\nfunction eclipticLongitude(M) {\n\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center\n        P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\n\n\nvar SunCalc = {};\n\n\n// calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c  = sunCoords(d),\n        H  = siderealTime(d, lw) - c.ra;\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: altitude(H, phi, c.dec)\n    };\n};\n\n\n// sun times configuration (angle, morning name, evening name)\n\nvar times = SunCalc.times = [\n    [-0.833, 'sunrise',       'sunset'      ],\n    [  -0.3, 'sunriseEnd',    'sunsetStart' ],\n    [    -6, 'dawn',          'dusk'        ],\n    [   -12, 'nauticalDawn',  'nauticalDusk'],\n    [   -18, 'nightEnd',      'night'       ],\n    [     6, 'goldenHourEnd', 'goldenHour'  ]\n];\n\n// adds a custom time to the times config\n\nSunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n};\n\n\n// calculations for sun times\n\nvar J0 = 0.0009;\n\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\n\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\n\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\n\n// returns set time for the given sun altitude\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\n\n\n// calculates sun times for a given date and latitude/longitude\n\nSunCalc.getTimes = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n\n        Jnoon = solarTransitJ(ds, M, L),\n\n        i, len, time, Jset, Jrise;\n\n\n    var result = {\n        solarNoon: fromJulian(Jnoon),\n        nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n        time = times[i];\n\n        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);\n        Jrise = Jnoon - (Jset - Jnoon);\n\n        result[time[1]] = fromJulian(Jrise);\n        result[time[2]] = fromJulian(Jset);\n    }\n\n    return result;\n};\n\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords(d) { // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude\n        M = rad * (134.963 + 13.064993 * d), // mean anomaly\n        F = rad * (93.272 + 13.229350 * d),  // mean distance\n\n        l  = L + rad * 6.289 * sin(M), // longitude\n        b  = rad * 5.128 * sin(F),     // latitude\n        dt = 385001 - 20905 * cos(M);  // distance to the moon in km\n\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\n\nSunCalc.getMoonPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec);\n\n    // altitude correction for refraction\n    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h,\n        distance: c.dist\n    };\n};\n\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nSunCalc.getMoonIllumination = function (date) {\n\n    var d = toDays(date),\n        s = sunCoords(d),\n        m = moonCoords(d),\n\n        sdist = 149598000, // distance from Earth to Sun in km\n\n        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n    return {\n        fraction: (1 + cos(inc)) / 2,\n        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n        angle: angle\n    };\n};\n\n\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nSunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return result;\n};\n\n\n// export as AMD module / Node module / browser variable\nif (typeof define === 'function' && define.amd) define(SunCalc);\nelse if (typeof module !== 'undefined') module.exports = SunCalc;\nelse window.SunCalc = SunCalc;\n\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/suncalc/suncalc.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}